<!-- FULL-STACK CLIENT PROJECT (React + Express + MongoDB) -->

// This is a simplified, fully working example full-stack application. 

// =============================
// Backend: server.js
// =============================

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'));

// User model
const UserSchema = new mongoose.Schema({
  email: { type: String, unique: true },
  password: String,
});
const User = mongoose.model('User', UserSchema);

// Register
app.post('/api/register', async (req, res) => {
  const { email, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  try {
    const user = await User.create({ email, password: hash });
    res.status(201).json({ message: 'User registered' });
  } catch (e) {
    res.status(400).json({ error: 'User already exists' });
  }
});

// Login
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: 'Invalid credentials' });

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(400).json({ error: 'Invalid credentials' });

  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
  res.json({ token });
});

app.listen(5000, () => console.log('Server running on port 5000'));

// =============================
// Frontend: React App (App.js)
// =============================

import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [token, setToken] = useState(null);

  const handleRegister = async () => {
    try {
      await axios.post('http://localhost:5000/api/register', { email, password });
      alert('Registered');
    } catch (e) {
      alert(e.response.data.error);
    }
  };

  const handleLogin = async () => {
    try {
      const res = await axios.post('http://localhost:5000/api/login', { email, password });
      setToken(res.data.token);
    } catch (e) {
      alert(e.response.data.error);
    }
  };

  return (
    <div style={{ padding: '2rem' }}>
      <h2>Client Auth Project</h2>
      <input type="email" placeholder="Email" onChange={e => setEmail(e.target.value)} /> <br /><br />
      <input type="password" placeholder="Password" onChange={e => setPassword(e.target.value)} /> <br /><br />
      <button onClick={handleRegister}>Register</button>
      <button onClick={handleLogin}>Login</button>

      {token && <p>Token: {token}</p>}
    </div>
  );
}

export default App;

// =============================
// .env
// =============================

MONGO_URI=mongodb://localhost:27017/clientauth
JWT_SECRET=secret123

